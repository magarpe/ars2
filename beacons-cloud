import turtle, random, math

tsize = 21
shapelinesize = 2
turtleSpeed = 8

robotColor = "silver"
robotSize = 25
turtlePos = (random.randint(-20,20),random.randint(-20,20))

noise = 0.0001
m = 100
t = 100

def createRobot():
    global tsize, shapelinesize, robotColor, robotSize, turtleSpeed, turtlePos
    cir = ((10, 0), (9.51, 3.09), (8.09, 5.88),(5.88, 8.09),
               (3.09, 9.51), (0, 10), (-3.09, 9.51), (-5.88, 8.09),
               (-8.09, 5.88),(-9.51, 3.09), (-10, 0), (-9.51, -3.09),
               (-8.09, -5.88), (-5.88, -8.09), (-3.09, -9.51), (-0.0, -10.0),
               (3.09, -9.51), (5.88, -8.09), (8.09, -5.88), (9.51, -3.09))
    line = ((0,0),(0,10))
    s = turtle.Shape("compound")
    s.addcomponent(cir, robotColor, "black")
    s.addcomponent(line, "black", "black")
    turtle.Screen().register_shape(robotColor, s)
    robotTurtle = turtle.Turtle(visible = False)
    robotTurtle.shapesize(outline=shapelinesize)
    robotTurtle.shape(robotColor)
    robotTurtle.speed(turtleSpeed)
    robotTurtle.turtlesize(robotSize/tsize)
    robotTurtle.penup()
    robotTurtle.goto(turtlePos)
    robotTurtle.showturtle()
    return robotTurtle

def drawBeacons(drawTurtle):
    for b in landmark_list:
        drawTurtle.penup()
        drawTurtle.goto(b)
        drawTurtle.dot(15,"red")

 #############################################################################################################################

def vlen(vector):
    return math.sqrt(vector[0] * vector[0] + vector[1] * vector[1])

def seglen(pt1, pt2):
    return vlen(psub(pt2, pt1))

def vadd(vec1, vec2):
    return (vec1[0] + vec2[0], vec1[1] + vec2[1])

def vscale(scale, vec):
    return (scale * vec[0], scale * vec[1])

def psub(pt1, pt2):
    return (pt1[0] - pt2[0], pt1[1] - pt2[1])

def pcenter(pt1, pt2):
    v12 = psub(pt2, pt1)  # unit vector from landmark 1 to 2
    return vadd(pt1, vscale(0.5, v12))  # pt1 + 0.5*v12

def vec_eq(vec1, vec2):
    equals = False
    if (vec1[0] == vec2[0]) and (vec1[1] == vec2[1]):
        equals = True
    return equals

def cosine_rule_get_angle(a, b, c):
    return math.acos((a * a + b * b - c * c) / (2 * a * b))

def unitvec(vec):
    len_vec = vlen(vec)
    return (vec[0] / len_vec, vec[1] / len_vec)

def vdot(vec1, vec2):
    return vec1[0] * vec2[0] + vec1[1] * vec2[1]

def unit_normal(vec, facing_vec):
    if (vec[0] == 0):  # ex. (0, 2)
        v_norm = (1, 0)
    elif (vec[1] == 0):  # ex. (2, 0)
        v_norm = (0, 1)
    else:
        v_temp = (-1 * vec[1], vec[0])
        v_temp_len = vlen(v_temp)
        v_norm = (v_temp[0] / v_temp_len, v_temp[1] / v_temp_len)
    if vdot(v_norm, facing_vec) >= 0:
        return v_norm
    else:
        return vscale(-1, v_norm)

def v_direction(vec):
    return math.atan2(vec[1], vec[0])

def heading_to_unit_velocity(heading):
    return (math.cos(heading), math.sin(heading))

def properly_order_landmarks(landmark_list, angle_list):
    '''
    Reorders the landmarks as the first step of geometric triangulation.
    '''
    landmark_orders = ((0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0))
    landmark_order = landmark_orders[0]
    for order_index in range(0, len(landmark_orders)):
        landmark_order = landmark_orders[order_index]
        angle0 = angle_list[landmark_order[0]]
        angle1 = angle_list[landmark_order[1]]
        angle2 = angle_list[landmark_order[2]]
        alpha = (angle1 - angle0) % 360.0
        beta = (angle2 - angle1) % 360.0
        if ((alpha >= 0) and (beta >= 0) and (alpha <= 180) and (beta <= 180)):
            break
    new_angle_list = [0, 0, 0]
    new_landmark_list = [0, 0, 0]
    for order_index in range(0, len(landmark_order)):
        new_angle_list[order_index] = angle_list[landmark_order[order_index]] % 360.0
        new_landmark_list[order_index] = landmark_list[landmark_order[order_index]]
    return (new_angle_list, new_landmark_list)

def triangulation(landmark_list, angle_list, eps):
    (angles, landmarks) = properly_order_landmarks(landmark_list, angle_list)
    alpha = (angles[1] - angles[0]) % 360.0
    alpha = alpha * math.pi / 180
    beta = (angles[2] - angles[1]) % 360.0
    beta = beta * math.pi / 180
    if (alpha == 0 and beta == 0):
        print ("Significant measurement error (collinear).")
        return
    pt1 = landmarks[0]
    pt2 = landmarks[1]
    pt3 = landmarks[2]
    v12 = unitvec(psub(pt2, pt1))  # unit vector from landmark 1 to 2
    v23 = unitvec(psub(pt3, pt2))  # unit vector from landmark 2 to 3
    d12 = vlen(psub(pt2, pt1))  # distance from point 1 to 2
    d23 = vlen(psub(pt3, pt2))  # distance from 2 to 3
    p12 = pcenter(pt1, pt2)  # pt1 + 0.5*v12
    p23 = pcenter(pt2, pt3)

    if (alpha == 0):  # Robot collinear with 1 and 2
        alpha = eps
    if (alpha == 180):  # Robot collinear with 1 and 2
        alpha = 180 - eps
    if (beta == 0):  # Robot collinear with 2 and 3
        beta = eps
    if (beta == 180):  # Robot collinear with 2 and 3
        beta = 180 - eps

    la = 0
    lb = 0
    if not (alpha == 90):
        # if alpha is zero, then la is zero but the tangent blows up
        la = d12 / (2.0 * math.tan(alpha))
    if not (beta == 90):
        lb = d23 / (2.0 * math.tan(beta))
    ra = d12 / (2.0 * math.sin(alpha))  # radius of circle a
    rb = d23 / (2.0 * math.sin(beta))  # radius of circle b

    # ca: center of circle a
    ca = (p12[0] - la * v12[1],
          p12[1] + la * v12[0])
    # cb: center of circle b
    cb = (p23[0] - lb * v23[1],
          p23[1] + lb * v23[0])
    cba = psub(ca, cb)  # points from center of circle b to center of circle a
    if vec_eq(ca, cb):
        print ("Significant measurement error (concentric).")
        return

    # get lengths of three segments of triangle (cb pt1 pt2) and find angle cb from the cosine rule
    tri_a = seglen(cb, ca)
    tri_b = seglen(cb, pt2)
    tri_c = seglen(pt2, ca)
    gamma = cosine_rule_get_angle(tri_a, tri_b, tri_c)  # math.asin(vlen(v12)/(2*ra))
    d2r = 2 * rb * math.sin(gamma)
    d2r_vec = vscale(d2r, unit_normal(cba, psub(ca, pt2)))
    # d2r*(the unit normal to cba generally facing from pt2 to ca)
    robot_coord = vadd(pt2, d2r_vec)
    vec_robot_to_pt1 = psub(pt1, robot_coord)
    heading = (v_direction(vec_robot_to_pt1) - (math.pi / 180) * angles[0])
    unit_velocity = heading_to_unit_velocity(heading)
    return (robot_coord, ((180 / math.pi) * heading % 360), unit_velocity)


# Begin program --------------------------------------------------------------------------

angle_list = [45, 135, 225]
# This is a list of the measured angles to the three landmarks.
# Angles increase counterclockwise from above, just like standard math.  Forward = 0.

landmark_list = [(150, 0), (150,150), (0, 150)]
# This is a list of the three landmarks, in the same order as the angles.  Each
# landmark has an x and a y coordinate.
# Note: These angles and landmarks were chosen to put the robot at the origin,
# with a heading of 30 degrees north of east.


#############################################################################################################################    

def getGaussianN(mean = 0):
    global m, noise
    num = sum([random.random() for i in range(m)], -(m * (1/2)))
    return num/(math.sqrt(noise)*math.sqrt(m)) + mean

def createGaussianCloud(muX, muY):
    global t
    xs = [getGaussianN() for g in range(t)]
    ys = [getGaussianN() for n in range(t)]
    return xs, ys

def drawCloud(drawTurtle, cloudX, cloudY):
    for p in range(len(cloudX)):
        drawTurtle.goto(cloudX[p],cloudY[p])
        drawTurtle.dot(5,"green")

def findShadowPos(cloudX, cloudY):
    x = sum(cloudX)/len(cloudX)
    y = sum(cloudY)/len(cloudY)
    return (x,y)

#############################################################################################################################

drawTurtle = turtle.Turtle(visible=False)
drawTurtle.speed(0)
drawBeacons(drawTurtle)
robot = createRobot()


result = triangulation(landmark_list, angle_list, 0.0001)
if result is not None:
    (robot_coord, heading, unit_velocity) = result
    print ("Landmark coordinates:", landmark_list)
    print ("Angles to landmarks:", angle_list)
    print ("Triangulated robot coordinates:", robot_coord)
    print ("Heading:", heading, "Unit velocity:", unit_velocity)

xx, yy = createGaussianCloud(result[0], result[1])
drawCloud(drawTurtle, xx, yy)
drawTurtle.goto(findShadowPos(xx, yy))
drawTurtle.dot(10,"black")
