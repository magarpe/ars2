import numpy as np
from numpy.linalg import inv
import matplotlib.pyplot as plt
from scipy import signal
import math
import random


# v is intial velocity and w is the initial angular velocity
v=0.5
w=0.5
theta=0
R=np.diag((0.4,0.4,0.4))
A = np.diag((1, 1, 1))
C=np.diag((1,1,1))
I=np.diag((1,1,1))
delta_t = 0.1  # 1sec


def kalman_filter_prediction(x_pos,A,P,U,B):
    x_pos=np.dot(A,x_pos)+np.dot(B,U)
    P=np.dot(A,np.dot(P,np.transpose(A)))+R
    return x_pos,P


def kalmal_filter_correction(x_pos,P,z,C,Q):
    # predictive Mean of y = pre_y
    # KG=kalman gain
    # new correction of x_pos
    # new correction of process coveritance


    pre_y=inv(np.dot(C,np.dot(P,np.transpose(C)))+Q)
    KG=np.dot(np.dot(P,C),pre_y)
    x_pos=x_pos+np.dot(KG,z-np.dot(C,x_pos))
    P=np.dot((I-KG*C),P)
    return x_pos,P


def main():
    # initial position of x when t=0
    x_pos = np.array([[0.0],[0.0],[0.0]])
    # process coveritance all digonals are 0.01
    P = np.diag((0.01, 0.01, 0.01))
    U = np.array([[v], [w]])
    B = np.array([[(delta_t * math.cos(math.radians(theta))), 0], [(delta_t * math.sin(math.radians(theta))), 0],
                  [0, delta_t]])
    Q=np.diag((0.1,0.1,0.1))#Q must be change to normalization
    x_data=[]
    y_data=[]
    th_data=[]
   # mean=10
    #std=0.4
    mean = (0,0)
    cov = [[1, 0], [0, 1]]
    plt.plot(0.0, 0.0, 'bo')


    #gx,gy= np.random.multivariate_normal(mean, cov,(20,20)).T
    for i in range(4):
        x_pos, P = kalman_filter_prediction(x_pos, A, P, U, B)
        z = random.uniform(0,9)  # this is measurment error is should be given, now i consider it as a rendom
        Q=np.dot(1,Q)
        x_pos,P=kalmal_filter_correction(x_pos,P,z,C,Q)
        mean=(x_pos[0,0],x_pos[1,0])
        gx, gy = np.random.multivariate_normal(mean, cov, (10,10)).T
        # print(P)
        if i == 0:
            plt.plot(gx,gy, 'yo')
            gx=[]
            gy=[]
        if i == 1:
            plt.plot(gx, gy, 'go')
            gx = []
            gy = []
        if i == 2:
            plt.plot(gx, gy, 'ro')
            gx = []
            gy = []
        if i == 3:
            plt.plot(gx, gy,'mo')
            gx = []
            gy = []

    plt.show()


main()
